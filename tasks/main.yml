---
- name: Install simple software without any additional configuration
  community.general.rpm_ostree_pkg:
    name: 
      - podman-compose
      - htop
      - tldr
    state: present

- name: Install and configure zsh shell
  block:
    - name: Install zsh
      community.general.rpm_ostree_pkg:
        name: zsh
        state: present
    - name: Make ohmyzsh git directory safe
      command: git config --global --add safe.directory /var/home/{{ item }}/.oh-my-zsh
      check_mode: no
      loop: "{{ USERS }}"
    - name: Clone ohmyzsh repo
      git:
        repo: "https://github.com/ohmyzsh/ohmyzsh.git"
        dest: /var/home/{{ item }}/.oh-my-zsh
      loop: "{{ USERS }}"
    - name: Copy zsh config
      copy:
        src: files/.zshrc
        dest: /var/home/{{ item }}
      loop: "{{ USERS }}"
    - name: Fix file permissions
      file:
        path: /var/home/{{ item }}/
        recurse: true
        owner: "{{ item }}"
        group: "{{ item }}"
      loop: "{{ USERS }}"
    - name: Change default shell
      user:
        name: "{{ item }}"
        shell: /bin/zsh
      loop: "{{ USERS }}"
  when: INSTALL_ZSH

- name: Install and configure tmux
  block:
    - name: Install tmux
      community.general.rpm_ostree_pkg:
        name: tmux
        state: present
    - name: Make tmux git directory safe
      command: git config --global --add safe.directory /var/home/{{ item }}/.tmux
      check_mode: no
      loop: "{{ USERS }}"
    - name: Download pretty tmux from git
      git:
        repo: "https://github.com/gpakosz/.tmux.git"
        dest: /var/home/{{ item }}/.tmux
      loop: "{{ USERS }}"
    - name: Fix file permissions for tmux
      file:
        path: /var/home/{{ item }}/.tmux
        owner: "{{ item }}"
        group: "{{ item }}"
      loop: "{{ USERS }}"
    - name: Copy local tmux config to home dir
      command: cp .tmux/.tmux.conf.local .
      args:
        chdir: /var/home/{{ item }}
      loop: "{{ USERS }}"
    - name: Create tmux config symlink
      command: ln -s -f .tmux/.tmux.conf
      args:
        chdir: /var/home/{{ item }}
      loop: "{{ USERS }}"
  when: INSTALL_TMUX

- name: Install and configure vim
  block:
    - name: Install vim
      community.general.rpm_ostree_pkg:
        name: vim
        state: present
    - name: Make vim git directory safe
      command: git config --global --add safe.directory /var/home/{{ item }}/.vim_runtime
      check_mode: no
      loop: "{{ USERS }}"
    - name: Download awesome vim from git
      git:
        repo: https://github.com/amix/vimrc.git
        depth: 1
        dest: /var/home/{{item}}/.vim_runtime
      loop: "{{ USERS }}"
    - name: Fix permissions so vim script can execute
      file:
        path: /var/home/{{ item }}/.vim_runtime
        recurse: false
        owner: "{{ item }}"
        group: "{{ item }}"
      loop: "{{ USERS }}"
    - name: Execute awesome vim install
      command: sh /var/home/{{ item }}/.vim_runtime/install_awesome_vimrc.sh
      become_user: "{{ item }}"
      loop: "{{ USERS }}"
    - name: Install vim airline
      git:
        repo: https://github.com/vim-airline/vim-airline.git
        dest: /var/home/{{ item }}/.vim_runtime/my_plugins/vim-airline
      loop: "{{ USERS }}"
  when: INSTALL_VIM

- name: Configure MOTD
  block:
    - name: Install neofetch
      community.general.rpm_ostree_pkg:
        name: neofetch
        state: present
    - name: Ensure .config file exists
      file:
        path: /var/home/{{ item }}/.config/neofetch
        state: directory
      loop: "{{ USERS }}"
    - name: Copy neofetch config
      copy:
        src: files/neofetch/config.conf
        dest: /var/home/{{ item }}/.config/neofetch/
      loop: "{{ USERS }}"
    - name: Copy megacorplogo
      copy:
        src: files/neofetch/megacorplogo
        dest: /var/home/{{ item }}/.config/neofetch/
      loop: "{{ USERS }}"
    - name: Fix permissions on .config dir
      file:
        path: /var/home/{{ item }}/.config
        recurse: true
        owner: "{{ item }}"
        group: "{{ item }}"
      loop: "{{ USERS }}"
